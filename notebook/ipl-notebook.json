{
	"name": "ipl-notebook",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "calebspool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "0a4ffded-ab1c-4502-835b-35df7fe06772"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/b9c2f884-2c91-48d5-a5e9-8e4a26af9d68/resourceGroups/rg-db-projects/providers/Microsoft.Synapse/workspaces/synapse-workspace-projects/bigDataPools/calebspool",
				"name": "calebspool",
				"type": "Spark",
				"endpoint": "https://synapse-workspace-projects.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/calebspool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"Start spark session"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"spark = SparkSession.builder.appName(\"IPL Data Analysis\").getOrCreate()\r\n",
					"spark"
				],
				"execution_count": 4
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#### **Data Loading**\r\n",
					"\r\n",
					"This two datasets - **deliveries** and **matches** from Azure Data Lake Storage into Spark DataFrames. The data is stored in CSV format, and the `header=True` parameter ensures that column names from the files are retained.\r\n",
					"\r\n",
					"###### ETL Pipeline Phase\r\n",
					"This code represents the **Extract** phase of the ETL (Extract, Transform, Load) pipeline. Data is being extracted from a cloud-based storage system (Azure Data Lake) into Spark for further processing.\r\n",
					"\r\n",
					"###### Data Source\r\n",
					"The data is sourced from an Azure Data Lake Storage Gen2 container, specifically from the following paths:\r\n",
					"- Deliveries dataset: `abfss://synapse-proj-files@projectsstore1.dfs.core.windows.net/deliveries/deliveries.csv`\r\n",
					"- Matches dataset: `abfss://synapse-proj-files@projectsstore1.dfs.core.windows.net/matches/matches.csv`\r\n",
					"\r\n",
					"This approach is typical in cloud-based big data engineering workflows, where raw data is extracted for further transformation and analysis.\r\n",
					"\r\n",
					"\r\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"collapsed": false
				},
				"source": [
					"deliveries = spark.read.load('abfss://synapse-proj-files@projectsstore1.dfs.core.windows.net/deliveries/deliveries.csv', format='csv'\r\n",
					", header=True\r\n",
					")\r\n",
					"matches = spark.read.load('abfss://synapse-proj-files@projectsstore1.dfs.core.windows.net/matches/matches.csv', format='csv'\r\n",
					", header=True\r\n",
					")"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"import pandas as pd"
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}